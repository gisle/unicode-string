#!/usr/bin/perl -w

use strict;
use Unicode::String 2.00 qw(ucs4 ucs2 utf16 utf7 utf8);
use Unicode::Map8;

my $before = shift || "latin1";
my $after  = shift || "utf8";

my $bsub = \&{$before};

unless (defined(&$bsub)) {
    my $map = Unicode::Map8->new($before);
    die "Don't know about charset '$before'\n" unless $map;
    $map->nostrict;
    $map->default_to16(ord("¿"));
    no strict 'refs';
    *{$before} = sub {	$map->tou($_[0]); };
}

if ($after =~ /^(ucs[24]|utf16|utf[78])$/) {
    *out = sub { print $_[0]->$after(); };
} elsif ($after eq "hex") {
    *out = sub {
	my $hex = $_[0]->hex;
	$hex =~ s/U\+000a\s*/U+000a\n/g;
	print $hex;
    };
} elsif ($after eq "uname") {
    require Unicode::CharName;
    *out = sub {
	for ($_[0]->unpack) {
	    printf "U+%04X   %s\n", $_, Unicode::CharName::uname($_) || "";
	}
    };
} else {
    my $map = Unicode::Map8->new($after);
    die "Don't know about charset '$after'\n" unless $map;
    $map->nostrict;
    $map->default_to8(ord("¿"));
    *out = sub { print $map->to8(${$_[0]}); };
}


if ($before =~ /^utf[78]$/) {
    # must read a line at the time (should not break encoded chars)
    while (<STDIN>) {
	out(&$bsub($_));
    }
} else {
    my $n;
    my $buf;
    # must read buffers which are multiples of 4 bytes (ucs4)
    while ( $n = read(STDIN, $buf, 512)) {
	#print "$n bytes read\n";
	out(&$bsub($buf));
    }
}

